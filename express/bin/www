#!/usr/bin/env node

/**
 * Module dependencies.
 */
const debug = require('debug')('timer-express:server');
const http = require('http');
const {exec} = require('child_process');
const config = require('../modules/config');
const app = require('../app');
const process = require('process');
const args = process.argv;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.app.port);
app.set('port', port);
let server = null;

// Init textures if arg is passed
if(args.find((a) => a === 'fixtures')) {
    const fixtures = require('../modules/fixtures').router;
    app.use('/fixtures', fixtures);
}

/**
 * Create HTTP server.
 */
if(args.find((a) => a === 'build')) {
    exec('npm run gulp build', (error, stdout, stderr) => {
        if (error) {
            throw new Error(error);
        }
        console.log('build out', stdout);
        console.log('build err', stderr);
        runServer();
    });
} else {
    runServer();
}

function runServer() {
    server = http.createServer(app);
    server.listen(port);
    console.log('Server start at port', port);
    server.on('error', onError);
    server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    if(!server) return;
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
